stages:
  - build
  - test
  - validate
  - sonarqube_scan
  - deploy
  - monitor
  - notify

variables:
  IMAGE_NAME: "your-image-name"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip

before_script:
  - echo "Starting Job..."

build_image:
  stage: build
  script:
    - echo "Building Docker image..."
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .

test:
  stage: test
  script:
    - echo "Running tests..."
    - ./run_tests.sh
  artifacts:
    reports:
      junit: test_report.xml
  allow_failure: false

validate_model:
  stage: validate
  script:
    - echo "Validating model..."
    - python validate_model.py
  artifacts:
    paths:
      - validation_report.txt
    expire_in: 1 week
  allow_failure: false

sonarqube_scan:
  stage: sonarqube_scan
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_TOKEN: $SONAR_TOKEN
    SONAR_HOST_URL: $SONAR_HOST_URL
  script:
    - sonar-scanner
  only:
    - master
    - merge_requests
  except:
    - tags
  allow_failure: false

push_to_registry:
  stage: deploy
  script:
    - echo "Pushing image to the registry..."
    - >
      if [ "$REGISTRY_TYPE" == "ecr" ]; then
        echo "Logging into AWS ECR..."
        $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
        docker tag $IMAGE_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG
      elif [ "$REGISTRY_TYPE" == "dockerhub" ]; then
        echo "Logging into Docker Hub..."
        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
        docker tag $IMAGE_NAME:$IMAGE_TAG $DOCKER_HUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG
        docker push $DOCKER_HUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG
      else
        echo "No valid registry type selected."
        exit 1
      fi
  only:
    refs:
      - master
    merge_requests: true
  when: on_success

deploy_staging:
  stage: deploy
  script: deploy_staging.sh
  environment:
    name: staging
    url: https://staging.example.com
  when: manual
  only:
    - develop
  when: on_success

monitor_performance:
  stage: monitor
  script:
    - echo "Monitoring application performance..."
    - python monitor_performance.py

notify_failure:
  stage: notify
  script:
    - echo "Pipeline failed at $CI_PIPELINE_URL"
    - ./notify_slack.sh "Pipeline failure notice"
  when: on_failure
